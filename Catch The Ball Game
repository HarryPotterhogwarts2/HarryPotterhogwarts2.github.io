import tkinter as tk
import random

class CatchTheBallGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Catch the Ball Game")

        # Game variables
        self.score = 0
        self.lives = 3
        self.ball_speed = 5
        self.ball_size = 50  # Updated ball size
        self.paddle_width = 100
        self.paddle_height = 20

        # Create canvas
        self.canvas = tk.Canvas(root, width=700, height=700, bg="lightblue")  # Updated canvas size
        self.canvas.pack()

        # Create paddle
        self.paddle = self.canvas.create_rectangle(300, 680, 400, 700, fill="blue")

        # Create ball
        self.ball = self.canvas.create_oval(10, 10, 10 + self.ball_size, 10 + self.ball_size, fill="red")

        # Initialize ball position and speed
        self.ball_x_speed = random.choice([-3, 3])
        self.ball_y_speed = self.ball_speed

        # Create score and lives display
        self.score_text = self.canvas.create_text(70, 20, text="Score: 0", font=("Arial", 14))
        self.lives_text = self.canvas.create_text(630, 20, text="Lives: 3", font=("Arial", 14))

        # Bind events
        self.canvas.bind("<Motion>", self.move_paddle)
        self.update_game()

    def move_paddle(self, event):
        x = event.x
        # Keep the paddle within the canvas bounds
        x1 = max(0, min(x - self.paddle_width // 2, 700 - self.paddle_width))
        self.canvas.coords(self.paddle, x1, 680, x1 + self.paddle_width, 700)

    def update_game(self):
        # Move the ball
        self.canvas.move(self.ball, self.ball_x_speed, self.ball_y_speed)
        ball_coords = self.canvas.coords(self.ball)
        paddle_coords = self.canvas.coords(self.paddle)

        # Check for collisions with walls
        if ball_coords[0] <= 0 or ball_coords[2] >= 700:
            self.ball_x_speed = -self.ball_x_speed
        if ball_coords[1] <= 0:
            self.ball_y_speed = self.ball_speed

        # Check for collision with paddle
        if (paddle_coords[0] < ball_coords[2] and paddle_coords[2] > ball_coords[0] and
                paddle_coords[3] >= ball_coords[3] >= paddle_coords[1]):
            self.ball_y_speed = -self.ball_speed
            self.score += 1
            self.ball_speed += 0.5
            self.update_score()

        # Check if the ball falls off the screen
        if ball_coords[3] >= 700:
            self.lives -= 1
            self.update_lives()
            if self.lives == 0:
                self.game_over()
                return
            else:
                self.reset_ball()

        # Continue updating the game
        self.root.after(20, self.update_game)

    def update_score(self):
        self.canvas.itemconfig(self.score_text, text=f"Score: {self.score}")

    def update_lives(self):
        self.canvas.itemconfig(self.lives_text, text=f"Lives: {self.lives}")

    def reset_ball(self):
        self.canvas.coords(self.ball, 10, 10, 10 + self.ball_size, 10 + self.ball_size)
        self.ball_x_speed = random.choice([-3, 3])
        self.ball_y_speed = self.ball_speed

    def game_over(self):
        self.canvas.create_text(350, 350, text="Game Over", font=("Arial", 24), fill="red")
        self.canvas.create_text(350, 400, text=f"Final Score: {self.score}", font=("Arial", 18), fill="black")

if __name__ == "__main__":
    root = tk.Tk()
    game = CatchTheBallGame(root)
    root.mainloop()
